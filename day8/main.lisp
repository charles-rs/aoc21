(ql:quickload "cl-ppcre")

(defun get-nums ()
  (with-open-file (stream "input")
    (loop :for line = (read-line stream nil)
	  :while line
	  :collect (cl-ppcre:split " " (string-left-trim '(#\Space) (cadr (cl-ppcre:split "\\|" line)))))))

(defun get-nums-b ()
  (with-open-file (stream "input")
    (loop :for line = (read-line stream nil)
	  :while line
	  :collect (mapcar (lambda (str) (cl-ppcre:split " " (string-trim '(#\Space) str)))
			   (cl-ppcre:split "\\|" line)))))

(defun parta (nums)
  (loop :for lst in nums
	:sum (length (remove-if-not (lambda (x) (or (= (length x) 2)
						    (= (length x) 3)
						    (= (length x) 4)
						    (= (length x) 7)))
				    lst))))

(defun partb ()
  (let ((nums (get-nums-b)))
    (loop :for pair-lst in nums
	  :sum (let ((to-string (make-array 10 :initial-element nil))
		     (to-int (make-hash-table :test 'equal)))
		 (labels ((add-mapping (num set)
			    "simulate a bidirectional map"
			    (setf (aref to-string num) set)
			    (setf (gethash set to-int) num))
			  (set-eq (set-a set-b)
			    "set equality"
			    (null (set-exclusive-or set-a set-b))))
		   (loop for i in (car pair-lst)
			 :do (let ((len (length i))
				   (lsti (sort (coerce i 'list) 'string<)))
			       (cond ((= 2 len) (add-mapping 1 lsti))
				     ((= 3 len) (add-mapping 7 lsti))
				     ((= 4 len) (add-mapping 4 lsti))
				     ((= 7 len) (add-mapping 8 lsti)))))
		   (let* ((top (car (set-difference (aref to-string 7) (aref to-string 1))))
			  (bottom-left (remove top (set-difference (aref to-string 8) (aref to-string 4)))))
		     (loop :for i in (car pair-lst)
			   :do (let* ((lsti (sort (coerce i 'list) 'string<))
				      (len (length i))
				      (isect (intersection bottom-left lsti)))
				 (if (and (= len 6)
					  (not (set-eq bottom-left isect))
					  (= (length isect) 1))
				     (add-mapping 9 lsti))))
		     (loop :for i in (car pair-lst)
			   :do (let ((lsti (sort (coerce i 'list) 'string<))
				     (len (length i))
				     (nine-set (aref to-string 9)))
				 (if (and (= len 5) (set-eq (intersection nine-set lsti) lsti))
				     (let ((nine-minus (set-difference nine-set lsti)))
				       (if (> (length (intersection nine-minus (aref to-string 1))) 0)
					   (add-mapping 5 lsti)
					   (add-mapping 3 lsti))))))
		     (let ((top-right (car (set-difference (aref to-string 4) (aref to-string 5)))))
		       (loop :for i in (car pair-lst)
			     :do (let ((lsti (sort (coerce i 'list) 'string<)))
				   (if (and (= 6 (length lsti))
					    (not (member top-right lsti)))
				       (add-mapping 6 lsti))))
		       (loop :for i in (car pair-lst)
			     :do (let* ((lsti (sort (coerce i 'list) 'string<))
					(len (length lsti)))
				   (if (not (gethash lsti to-int))
				       (cond ((= len 5) (add-mapping 2 lsti))
					     ((= len 6) (add-mapping 0 lsti))))))
		       (reduce (lambda (acc str)
				 (+ (* acc 10) (gethash (sort (coerce str 'list) 'string<) to-int)))
			       (cadr pair-lst) :initial-value 0))))))))
